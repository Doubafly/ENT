generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Table pour gérer les annexes (sites universitaires)
model Annexes {
  id_annexe Int       @id @default(autoincrement())
  nom       String
  adresse   String
  ville     String?
  region    String?
  filieres  Filieres[]

  @@map("annexes")
}

// Table pour gérer les sessions académiques
model Sessions {
  id_sessions      Int             @id @default(autoincrement())
  annee_academique String          @db.VarChar(9)
  cours            Cours[]

  @@map("sessions")
}

// Table pour gérer les cours
model Cours {
  id_cours          Int              @id @default(autoincrement())
  id_filiere_module Int
  id_professeur     Int
  id_sessions       Int
  semestre          CoursSemestre 
  filiere_module    FiliereModule    @relation(fields: [id_filiere_module], references: [id_filiere_module])
  sessions          Sessions         @relation(fields: [id_sessions], references: [id_sessions])
  enseignant        Enseignants      @relation(fields: [id_professeur], references: [id])
  emplois_du_temps  EmploisDuTemps[]
  notes             Notes[]

  @@index([id_filiere_module], map: "Cours_id_filiere_module_fkey")
  @@index([id_professeur], map: "Cours_id_professeur_fkey")
  @@index([id_sessions], map: "Cours_id_sessions_fkey")
}

// Table pour gérer les emplois du temps
model EmploisDuTemps {
  id_emploi   Int             @id @default(autoincrement())
  id_cours    Int
  jour        EmploisDuTempsJour
  heure_debut DateTime
  heure_fin   DateTime
  salle       String?
  cours       Cours           @relation(fields: [id_cours], references: [id_cours])

  @@index([id_cours], map: "EmploisDuTemps_id_cours_fkey")
  @@unique([id_cours, jour, heure_debut, heure_fin], map: "Unique_Cours_Same_Time") // Empêcher la superposition des cours
}

// Table pour gérer les enseignants
model Enseignants {
  id             Int          @id @default(autoincrement())
  matricule      String       @unique(map: "Enseignant_matricule_key")
  id_utilisateur Int          @unique(map: "Enseignant_id_utilisateur_key")
  specialite     String
  cours          Cours[]
  utilisateur    Utilisateurs @relation("UtilisateurEnseignant", fields: [id_utilisateur], references: [id_utilisateur], onDelete: Cascade)

  @@map("enseignants")
}

// Table pour gérer les étudiants
model Etudiants {
  id             Int          @id @default(autoincrement())
  matricule      String       @unique(map: "Etudiants_matricule_key")
  id_utilisateur Int          @unique(map: "Etudiants_id_utilisateur_key")
  date_naissance DateTime
  date_inscription DateTime
  id_filiere     Int
  filiere        Filieres     @relation(fields: [id_filiere], references: [id_filiere])
  utilisateur    Utilisateurs @relation("UtilisateurEtudiant", fields: [id_utilisateur], references: [id_utilisateur], onDelete: Cascade)
  notes          Notes[]
  paiements      Paiements[]

  @@index([id_filiere], map: "Etudiants_id_filiere_fkey")
  @@unique([id_utilisateur, id_filiere], map: "Unique_Student_Filiere") // Un étudiant ne peut être inscrit deux fois à la même filière
}

// Table pour gérer les filières et modules
model FiliereModule {
  id_filiere_module Int      @id @default(autoincrement())
  syllabus          String?
  id_filiere        Int
  id_module         Int
  volume_horaire    Int?
  code_module       String
  cours             Cours[]
  filiere           Filieres @relation(fields: [id_filiere], references: [id_filiere])
  module            Modules  @relation(fields: [id_module], references: [id_module])

  @@index([id_filiere], map: "FiliereModule_id_filiere_fkey")
  @@index([id_module], map: "FiliereModule_id_module_fkey")
}

// Table pour gérer les filières
model Filieres {
  id_filiere    Int             @id @default(autoincrement())
  nom           String
  description   String?
  niveau        FilieresNiveau
  montant_annuel Float          @default(0.0)
  id_annexe     Int?
  etudiants     Etudiants[]
  filiere_module FiliereModule[]
  annexe        Annexes?        @relation(fields: [id_annexe], references: [id_annexe])

  @@index([id_annexe], map: "Filieres_id_annexe_fkey")
}

// Table pour gérer les modules
model Modules {
  id_module     Int             @id @default(autoincrement())
  nom           String
  description   String?
  filiere_module FiliereModule[]
}

// Table pour gérer les notes
model Notes {
  id_note          Int       @id @default(autoincrement())
  id_etudiant      Int
  id_cours         Int
  note_class       Float?
  note_exam        Float?
  commentaire      String?
  date_saisie      DateTime  @default(now())
  cours            Cours     @relation(fields: [id_cours], references: [id_cours])
  etudiant         Etudiants @relation(fields: [id_etudiant], references: [id])

  @@index([id_cours], map: "Notes_id_cours_fkey")
  @@index([id_etudiant], map: "Notes_id_etudiant_fkey")
}

// Table pour gérer les paiements
model Paiements {
  id_paiement        Int                     @id @default(autoincrement())
  id_etudiant        Int
  montant            Decimal                   @db.Decimal(10, 2)
  date_paiement      DateTime
  type_paiement      PaiementsTypePaiement
  reference_paiement String                  @unique(map: "Paiements_reference_paiement_key")
  etudiant           Etudiants               @relation(fields: [id_etudiant], references: [id])

  @@index([id_etudiant], map: "Paiements_id_etudiant_fkey")
}

// Table pour gérer les utilisateurs
model Utilisateurs {
  id_utilisateur Int               @id @default(autoincrement())
  nom            String
  prenom         String
  email          String            @unique(map: "Utilisateurs_email_key")
  mot_de_passe   String
  sexe           UtilisateursSexe
  type           UtilisateursType
  telephone      String?           @db.VarChar(15)
  adresse        String?
  profil         String?            @unique(map: "Utilisateurs_profil_key")
  date_creation  DateTime          @default(now())

  // Relations avec les différents types d'utilisateurs
  etudiant   Etudiants?   @relation("UtilisateurEtudiant")
  enseignant Enseignants? @relation("UtilisateurEnseignant")
  admin      Admin?       @relation("UtilisateurAdmin")

  Permission Permission[] @relation("UtilisateurPermission")
}

model Admin {
  id_admin      Int               @id @default(autoincrement())
  id_utilisateur Int              @unique(map: "Admin_id_utilisateur_key")
  utilisateur   Utilisateurs      @relation("UtilisateurAdmin", fields: [id_utilisateur], references: [id_utilisateur], onDelete: Cascade)

  // permissions   AdminPermission[] // Relation avec la table de liaison

  @@map("admin")
}

// Table pour gérer les permissions
model Permission {
  id_permission Int               @id @default(autoincrement())
  id_utilisateur Int               @unique(map: "Permission_id_utilisateur_key")
  enseignants    Boolean           @default(false)
  etudiants      Boolean           @default(false)
  admin         Boolean           @default(false)
  classes       Boolean           @default(false)
  paiement     Boolean           @default(false)
  note         Boolean           @default(false)
  emplois_du_temps Boolean       @default(false)
  parametres    Boolean           @default(false)
  annonces      Boolean           @default(false)
  utilisateur   Utilisateurs      @relation("UtilisateurPermission", fields: [id_utilisateur], references: [id_utilisateur], onDelete: Cascade)

  @@map("permission")
}



// Enums
enum EmploisDuTempsJour {
  Lundi
  Mardi
  Mercredi
  Jeudi
  Vendredi
  Samedi
}

enum FilieresNiveau {
  Primaire
  Secondaire 
  Licence                                       
  Master1      
  Master2
  Doctorat  
}

enum CoursSemestre {
  Semestre1
  Semestre2 
}

enum PaiementsTypePaiement {
  Inscription 
  Scolarite
  Autre          
}

enum UtilisateursSexe {
  M
  F
}

enum UtilisateursType {
  Etudiant
  Enseignant
  Admin
}