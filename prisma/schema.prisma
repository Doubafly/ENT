generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Table pour gérer les annexes (sites universitaires)
model Annexes {
  id_annexe Int       @id @default(autoincrement())
  nom       String
  adresse   String
  ville     String?
  region    String?
  filieres  Filieres[]

  @@map("annexes")
}

// Table pour gérer les sessions académiques
model Sessions {
  id_sessions      Int             @id @default(autoincrement())
  annee_academique String          @db.VarChar(9)
  cours            Cours[]

  @@map("sessions")
}

// Table pour gérer les cours
model Cours {
  id_cours          Int              @id @default(autoincrement())
  id_filiere_module Int
  id_professeur     Int
  id_sessions       Int
  semestre          CoursSemestre 
  filiere_module    FiliereModule    @relation(fields: [id_filiere_module], references: [id_filiere_module])
  sessions          Sessions         @relation(fields: [id_sessions], references: [id_sessions])
  enseignant        Enseignants      @relation(fields: [id_professeur], references: [id])
  emplois_du_temps  EmploisDuTemps[]
  notes             Notes[]

  @@index([id_filiere_module], map: "Cours_id_filiere_module_fkey")
  @@index([id_professeur], map: "Cours_id_professeur_fkey")
  @@index([id_sessions], map: "Cours_id_sessions_fkey")
  Absences Absences[]
}

// Table pour gérer les emplois du temps
model EmploisDuTemps {
  id_emploi   Int             @id @default(autoincrement())
  id_cours    Int
  id_enseignant Int            @default(1)
  jour        EmploisDuTempsJour
  heure_debut DateTime
  heure_fin   DateTime
  salle       String?
  cours       Cours           @relation(fields: [id_cours], references: [id_cours])
  enseignant  Enseignants     @relation(fields: [id_enseignant], references: [id])

  @@index([id_cours], map: "EmploisDuTemps_id_cours_fkey")
  @@index([id_enseignant], map: "EmploisDuTemps_id_enseignant_fkey")
  @@unique([id_cours, jour, heure_debut, heure_fin], map: "Unique_Cours_Same_Time") // Empêcher la superposition des cours
}

// Table pour gérer les absences
model Absences {
  id_absence    Int       @id @default(autoincrement())
  id_utilisateur Int
  id_cours      Int
  date_absence  DateTime
  motif         String?
  utilisateur   Utilisateurs @relation(fields: [id_utilisateur], references: [id_utilisateur])
  cours         Cours        @relation(fields: [id_cours], references: [id_cours])

  @@index([id_utilisateur], map: "Absences_id_utilisateur_fkey")
  @@index([id_cours], map: "Absences_id_cours_fkey")
}

// Table pour gérer les annonces
model Annonce {
  id_annonce    Int       @id @default(autoincrement())
  id_admin      Int
  titre         String
  contenu       String
  date_creation DateTime  @default(now())
  admin         Admin @relation(fields: [id_admin], references: [id_admin])

  @@index([id_admin], map: "Annonce_id_admin_fkey")
}

// Table pour gérer les enseignants
model Enseignants {
  id             Int          @id @default(autoincrement())
  matricule      String       @unique(map: "Enseignant_matricule_key")
  id_utilisateur Int          @unique(map: "Enseignant_id_utilisateur_key")
  specialite     String
  cours          Cours[]
  utilisateur    Utilisateurs @relation("UtilisateurEnseignant", fields: [id_utilisateur], references: [id_utilisateur], onDelete: Cascade)

  @@map("enseignants")
  EmploisDuTemps EmploisDuTemps[]
}

// Table pour gérer les étudiants
model Etudiants {
  id             Int          @id @default(autoincrement())
  matricule      String       @unique(map: "Etudiants_matricule_key")
  id_utilisateur Int          @unique(map: "Etudiants_id_utilisateur_key")
  date_naissance DateTime
  date_inscription DateTime
  id_filiere     Int
  filiere        Filieres     @relation(fields: [id_filiere], references: [id_filiere])
  utilisateur    Utilisateurs @relation("UtilisateurEtudiant", fields: [id_utilisateur], references: [id_utilisateur], onDelete: Cascade)
  notes          Notes[]
  paiements      Paiements[]

  @@index([id_filiere], map: "Etudiants_id_filiere_fkey")
  @@unique([id_utilisateur, id_filiere], map: "Unique_Student_Filiere") // Un étudiant ne peut être inscrit deux fois à la même filière
}

// Table pour gérer les filières et modules
model FiliereModule {
  id_filiere_module Int      @id @default(autoincrement())
  syllabus          String?
  id_filiere        Int
  id_module         Int
  volume_horaire    Int?
  code_module       String
  coefficient       Int      @default(1)
  cours             Cours[]
  filiere           Filieres @relation(fields: [id_filiere], references: [id_filiere])
  module            Modules  @relation(fields: [id_module], references: [id_module])

  @@index([id_filiere], map: "FiliereModule_id_filiere_fkey")
  @@index([id_module], map: "FiliereModule_id_module_fkey")
}

// Table pour gérer les filières
model Filieres {
  id_filiere    Int             @id @default(autoincrement())
  nom           String
  description   String?
  niveau        FilieresNiveau
  montant_annuel Float          @default(0.0)
  id_annexe     Int?
  etudiants     Etudiants[]
  filiere_module FiliereModule[]
  annexe        Annexes?        @relation(fields: [id_annexe], references: [id_annexe])

  @@index([id_annexe], map: "Filieres_id_annexe_fkey")
}

// Table pour gérer les modules
model Modules {
  id_module     Int             @id @default(autoincrement())
  nom           String
  description   String?
  filiere_module FiliereModule[]
}

// Table pour gérer les notes


// Table pour gérer les paiements
model Paiements {
  id_paiement        Int                     @id @default(autoincrement())
  id_etudiant        Int
  montant            Decimal                   @db.Decimal(10, 2)
  date_paiement      DateTime
  type_paiement      PaiementsTypePaiement
  reference_paiement String                  @unique(map: "Paiements_reference_paiement_key")
  etudiant           Etudiants               @relation(fields: [id_etudiant], references: [id])

  @@index([id_etudiant], map: "Paiements_id_etudiant_fkey")
}

// Table pour gérer les utilisateurs
model Utilisateurs {
  id_utilisateur Int               @id @default(autoincrement())
  nom            String
  prenom         String
  email          String            @unique(map: "Utilisateurs_email_key")
  mot_de_passe   String
  sexe           UtilisateursSexe
  type           UtilisateursType
  telephone      String?           @db.VarChar(15)
  adresse        String?
  profil         String?            
  date_creation  DateTime          @default(now())

  etudiant   Etudiants?   @relation("UtilisateurEtudiant")
  enseignant Enseignants? @relation("UtilisateurEnseignant")
  admin      Admin?       @relation("UtilisateurAdmin")

  Permission Permission[] @relation("UtilisateurPermission")

  Absences Absences[]
}

model Admin {
  id_admin      Int               @id @default(autoincrement())
  id_utilisateur Int              @unique(map: "Admin_id_utilisateur_key")
  utilisateur   Utilisateurs      @relation("UtilisateurAdmin", fields: [id_utilisateur], references: [id_utilisateur], onDelete: Cascade)

  // permissions   AdminPermission[] // Relation avec la table de liaison

  @@map("admin")
  Annonce Annonce[]
}

// Table pour gérer les permissions
model Permission {
  id_permission Int               @id @default(autoincrement())
  id_utilisateur Int               @unique(map: "Permission_id_utilisateur_key")
  enseignants    Boolean           @default(false)
  etudiants      Boolean           @default(false)
  admin         Boolean           @default(false)
  classes       Boolean           @default(false)
  paiement     Boolean           @default(false)
  note         Boolean           @default(false)
  emplois_du_temps Boolean       @default(false)
  parametres    Boolean           @default(false)
  annonces      Boolean           @default(false)
  utilisateur   Utilisateurs      @relation("UtilisateurPermission", fields: [id_utilisateur], references: [id_utilisateur], onDelete: Cascade)

  @@map("permission")
}
model Notes {
  id_note          Int       @id @default(autoincrement())
  id_etudiant      Int
  id_cours         Int
  note_class       Float?
  note_exam        Float?
  commentaire_enseignant String?  // Commentaire de l'enseignant sur la note
  commentaire_etudiant String?    // Réclamation de l'étudiant
  date_saisie      DateTime?  @default(now())
  date_validation  DateTime? // Date de validation finale
  statut_note      NoteStatut @default(Brouillon)
  statut_reclamation ReclamationStatut? @default(null) // Null si pas de réclamation
  date_reclamation DateTime? // Date de la réclamation
  date_traitement  DateTime? // Date de traitement de la réclamation
  cours            Cours     @relation(fields: [id_cours], references: [id_cours])
  etudiant         Etudiants @relation(fields: [id_etudiant], references: [id])

  @@index([id_cours], map: "Notes_id_cours_fkey")
  @@index([id_etudiant], map: "Notes_id_etudiant_fkey")
}


// Enums modifiés
enum NoteStatut {
  Brouillon      // En cours de saisie par l'enseignant
  Provisoire    // Visible par l'étudiant (période de réclamation)
  Valide        // Validé définitivement (plus de modifications)
}

enum ReclamationStatut {
  null
  EnAttente    // Réclamation soumise
  EnCours      // En cours d'examen
  Acceptee     // Réclamation acceptée (note modifiée)
  Rejetee      // Réclamation refusée
}


// Enums
enum EmploisDuTempsJour {
  Lundi
  Mardi
  Mercredi
  Jeudi
  Vendredi
  Samedi
}

enum FilieresNiveau {
  Primaire
  Secondaire
  Licence
  Master1
  Master2
  Doctorat
}

enum CoursSemestre {
  Semestre1
  Semestre2
}

enum PaiementsTypePaiement {
  Inscription
  Scolarite
  Autre
}

enum UtilisateursSexe {
  M
  F
}

enum UtilisateursType {
  Etudiant
  Enseignant
  Admin
}

model Document {
  id            Int       @id @default(autoincrement())
  titre         String
  description   String?
  chemin_fichier String
  type_fichier  String?
  taille_fichier Int?
  date_upload   DateTime  @default(now())
  est_actif     Boolean   @default(true)
  id_uploader   Int
  id_classe     Int

  // Index pour les performances (optionnel mais recommandé)
  @@index([id_uploader], name: "Document_id_uploader_fkey")
  @@index([id_classe], name: "Document_id_classe_fkey")

  // Contrainte d'unicité : titre unique par classe
  @@unique([titre, id_classe], name: "unique_titre_par_classe")

  @@map("documents")
}

